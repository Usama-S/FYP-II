
@{
    ViewBag.Title = "Map";
}

@section HeadCSS{
    <!-- bootstrap link -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
          integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
}

@section HeadScripts{
    <!-- mapbox libraries -->
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.css' rel='stylesheet' />
}


@*<h2>Maps</h2>*@

<div id='map' style='width: 100% !important; height: 550px; border: 1px black solid;'></div>


@section FootScripts{
    <script>
        // plot points for real dataset

        function initMap(locationsData) {
            var center = [-48.940973, -20.817396];        // [lng, lat]

            mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm95MTIzIiwiYSI6ImNrbDkxaTE2azJ4aXYydmxidGM1NnVjaG8ifQ.Q9J8T_2V96wWYie64dL-KA';
            const map = new mapboxgl.Map({
                container: 'map', // container ID
                style: 'mapbox://styles/mapbox/streets-v11', // style URL
                center: center, // starting position [lng, lat]
                zoom: 5 // starting zoom
            });

            // center marker for generating the locations
            const marker = new mapboxgl.Marker({ color: "#FF0000" })
                .setLngLat(center)
                .addTo(map);

            // initial reference point
            var refPoint = center;


            // mmmmmmmmmmmmmmmmmmmmmmmmmmmm set points for locations data. mmmmmmmmmmmmmmmmmmmm

            // set points in the map
            // set points for customers.
            var customers = locationsData.customers;
            for (let i = 0; i < customers.length; i++) {
                var lng = customers[i].store_longitude;
                var lat = customers[i].store_latitude;
                const marker = new mapboxgl.Marker()
                    .setLngLat([lng, lat])
                    .addTo(map);
            }


            // set points for restaurants.
            var restaurants = locationsData.restaurants;
            for (let i = 0; i < restaurants.length; i++) {

                // styling for restaurant point
                const el = document.createElement('div');
                const width = 30;
                const height = 45;
                el.className = 'marker';
                el.style.backgroundImage = `url(/App_Images/restaurant.png)`;
                el.style.backgroundRepeat = `no-repeat`;
                el.style.width = `${width}px`;
                el.style.height = `${height}px`;
                el.style.backgroundSize = '100%';


                var lng = restaurants[i].hub_longitude;
                var lat = restaurants[i].hub_latitude;
                const marker = new mapboxgl.Marker(el)
                    .setLngLat([lng, lat])
                    .addTo(map);
            }


            // set points for riders.
            var riders = locationsData.riders;
            for (let i = 0; i < riders.length; i++) {

                // styling for the rider point
                const el = document.createElement('div');
                const width = 30;
                const height = 45;
                el.className = 'marker';
                el.style.backgroundImage = `url(/App_Images/rider.png)`;
                el.style.backgroundRepeat = `no-repeat`;
                el.style.width = `${width}px`;
                el.style.height = `${height}px`;
                el.style.backgroundSize = 'auto 100%';


                var lng = riders[i].current_longitude;
                var lat = riders[i].current_latitude;
                const marker = new mapboxgl.Marker(el)
                    .setLngLat([lng, lat])
                    .addTo(map);
            }
            // mmmmmmmmmmmmmmmmmmmmmmmmmmmm end get points for locations data. mmmmmmmmmmmmmmmmmmmm

        }

        // initialize map on page load with gulshan as default center
        //initMap();


        // method to call AJAX to get Locations data.
        function GetLocations() {
            var url = '/api/GetLocations'

            var xhr = new XMLHttpRequest();
            xhr.open("get", url);
            xhr.onload = function () {
                var response = JSON.parse(xhr.response);
                console.log(response);
                initMap(response);
            };
            xhr.send();
        }

        GetLocations();

    </script>
}

